ce import org.apache.commons.lang3.StringUtils;

public class CATEventValidator {

// Error Code: 2078
// Description: Missing or Invalid quantity
// Explanation: quantity must be in the correct format.
@NotNull(message = "2078")
@Digits(integer = 10, fraction = 0, message = "2078")
private Long quantityValidator;

// Error Code: 2079
// Description: Missing or Invalid quoteID
// Explanation: When required, quoteID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2079")
private String quoteIDValidator;

// Error Code: 2080
// Description: Missing or Invalid quoteKeyDate
// Explanation: When required, quoteKeyDate must be populated in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2080")
private String quoteKeyDateValidator;

// Error Code: 2081
// Description: Missing or Invalid receiverIMID
// Explanation: receiverIMID must be populated in the correct format.
@NotNull(message = "2081")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2081")
private String receiverIMIDValidator;

// Error Code: 2082
// Description: Missing or Invalid receiverType
// Explanation: receiverType must be populated in the correct format.
@NotNull(message = "2082")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2082")
private String receiverTypeValidator;

// Error Code: 2083
// Description: Missing or Invalid reportingExceptionCode
// Explanation: reportingExceptionCode must be populated in the correct format.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2083")
private String reportingExceptionCodeValidator;

// Error Code: 2084
// Description: Missing or Invalid representativeInd
// Explanation: representativeInd must be populated in the correct format.
@NotNull(message = "2084")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2084")
private String representativeIndValidator;

// Error Code: 2085
// Description: Missing or Invalid priorFillKeyDate
// Explanation: When required, priorFillKeyDate must be populated and in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2085")
private String priorFillKeyDateValidator;

// Error Code: 2085
// Description: Missing or Invalid priorFulfillmentID
// Explanation: When required, priorFulfillmentID must be in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2085")
private String priorFulfillmentIDValidator;

    // Error Code: 2001
    // Description: Missing or Invalid accountHolderType
    // Explanation: accountHolderType must be populated with one of the allowable values.
    @NotNull(message = "2001")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2001")
    private String accountHolderTypeValidator;

    // Error Code: 2002
    // Description: Missing or Invalid actionType
    // Explanation: actionType must be populated with one of the allowable values.
    @NotNull(message = "2002")
    @Pattern(regexp = "^(ALLOWED_ACTION_1|ALLOWED_ACTION_2|...)$", message = "2002")
    private String actionTypeValidator;

    // Error Code: 2003
    // Description: Missing or Invalid affiliateFlag
    // Explanation: affiliateFlag must be populated with one of the allowable values.
    @NotNull(message = "2003")
    @Pattern(regexp = "^(TRUE|FALSE)$", message = "2003")
    private String affiliateFlagValidator;

    // Error Code: 2004
    // Description: Missing or Invalid aggregatedOrders
    // Explanation: If populated, aggregatedOrders must be in the correct format.
    @AssertTrue(message = "2004")
    private boolean isAggregatedOrdersValidator() {
        if (StringUtils.isNotEmpty(aggregatedOrders)) {
            // Implement logic to check aggregatedOrders format
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2005
    // Description: Missing or Invalid askPrice
    // Explanation: When required, askPrice must be in the correct format. Required when askQty is populated.
    @AssertTrue(message = "2005")
    private boolean isAskPriceValidator() {
        if (StringUtils.isNotEmpty(askQty) && StringUtils.isEmpty(askPrice)) {
            return false;
        }
        if (StringUtils.isNotEmpty(askPrice)) {
            // Implement logic to check askPrice format
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2007
    // Description: Missing or Invalid askQty
    // Explanation: When required, askQty must be in the correct format. Required when askPrice is populated.
    @AssertTrue(message = "2007")
    private boolean isAskQtyValidator() {
        if (StringUtils.isNotEmpty(askPrice) && StringUtils.isEmpty(askQty)) {
            return false;
        }
        if (StringUtils.isNotEmpty(askQty)) {
            // Implement logic to check askQty format
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2008
    // Description: Missing or Invalid atsDisplayInd
    // Explanation: When required, atsDisplayInd must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2008")
    private String atsDisplayIndValidator;

    // Error Code: 2019
    // Description: Combination of destination and destinationType is Invalid
    // Explanation: For Route Events, specific destinationType and destination combinations are required.
    @AssertTrue(message = "2019")
    private boolean isDestinationTypeAndDestinationValidator() {
        if (StringUtils.isNotEmpty(destinationType) && StringUtils.isNotEmpty(destination)) {
            // Implement logic to check destinationType and destination combination
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2020
    // Description: Missing or Invalid destinationType
    // Explanation: destinationType must be populated with one of the allowable values.
    @NotNull(message = "2020")
    @Pattern(regexp = "^(ALLOWED_TYPE_1|ALLOWED_TYPE_2|...)$", message = "2020")
    private String destinationTypeValidator;

    // Error Code: 2021
    // Description: Missing or Invalid displayPrice
    // Explanation: When required, displayPrice must be in the correct format.
    @AssertTrue(message = "2021")
    private boolean isDisplayPriceValidator() {
        if (StringUtils.isNotEmpty(displayPrice)) {
            // Implement logic to check displayPrice format
            return true; // Replace with actual validation
        }
        return true;
    }
}
public class CATEventValidator {

    // Error Code: 2022
    // Description: Missing or Invalid displayQty
    // Explanation: When required, displayQty must be in the correct format.
    @AssertTrue(message = "2022")
    private boolean isDisplayQtyValidator() {
        if (StringUtils.isNotEmpty(displayQty)) {
            // Implement logic to check displayQty format
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2023
    // Description: Missing or Invalid dupROIDCond
    // Explanation: dupROIDCond must be populated with one of the allowable values.
    @NotNull(message = "2023")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2023")
    private String dupROIDCondValidator;

    // Error Code: 2024
    // Description: Missing or Invalid electronicDupFlag
    // Explanation: electronicDupFlag must be populated and is one of the allowable values.
    @NotNull(message = "2024")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2024")
    private String electronicDupFlagValidator;

    // Error Code: 2025
    // Description: Invalid electronicTimestamp
    // Explanation: electronicTimestamp must be in the correct format.
    @AssertTrue(message = "2025")
    private boolean isElectronicTimestampValidator() {
        if (StringUtils.isNotEmpty(electronicTimestamp)) {
            // Implement logic to check electronicTimestamp format
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2026
    // Description: Missing or Invalid errorROEID
    // Explanation: errorROEID must be blank when the actionType is 'NEW'; must be populated when actionType is 'RPR'.
    @AssertTrue(message = "2026")
    private boolean isErrorROEIDValidator() {
        if ("NEW".equals(actionType) && StringUtils.isNotEmpty(errorROEID)) {
            return false;
        }
        if ("RPR".equals(actionType) && StringUtils.isEmpty(errorROEID)) {
            return false;
        }
        return true;
    }

    // Error Code: 2027
    // Description: Missing or Invalid eventTimestamp
    // Explanation: eventTimestamp must be in the correct format. If manualFlag is true, eventTimestamp must be reported in increments of at least one second. If manualFlag is false, eventTimestamp must be reported in increments of at least milliseconds.
    @AssertTrue(message = "2027")
    private boolean isEventTimestampValidator() {
        if (StringUtils.isEmpty(eventTimestamp)) {
            return false;
        }
        // Implement logic to check eventTimestamp format based on manualFlag
        return true; // Replace with actual validation
    }

    // Continue with similar patterns for the remaining error codes...
}
public class CATEventValidator {

    // Error Code: 2028
    // Description: Combination of exchOriginCode and destinationType is invalid
    // Explanation: For Option Order Route events, if destinationType is not E, exchOriginCode must be blank. If destinationType is E, exchOriginCode must be populated.
    @AssertTrue(message = "2028")
    private boolean isExchOriginCodeAndDestinationTypeValid() {
        if ("E".equals(destinationType) && StringUtils.isEmpty(exchOriginCode)) {
            return false;
        }
        if (!"E".equals(destinationType) && StringUtils.isNotEmpty(exchOriginCode)) {
            return false;
        }
        return true;
    }

    // Error Code: 2030
    // Description: Missing or Invalid fillKeyDate
    // Explanation: fillKeyDate must be populated in the correct format.
    @NotNull(message = "2030")
    @Pattern(regexp = "^\\d{8}$", message = "2030")
    private String fillKeyDateValidator;

    // Error Code: 2031
    // Description: Missing or Invalid firmDesignatedID
    // Explanation: When required, firmDesignatedID must be in the correct format and unique among all identifiers from any given Industry Member for each business date.
    @AssertTrue(message = "2031")
    private boolean isFirmDesignatedIDValid() {
        if (StringUtils.isNotEmpty(firmDesignatedID)) {
            // Implement logic to check firmDesignatedID format and uniqueness
            return true; // Replace with actual validation
        }
        return true;
    }

    // Error Code: 2032
    // Description: Missing or Invalid firmROEID
    // Explanation: firmROEID must be populated and in the correct format.
    @NotNull(message = "2032")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2032")
    private String firmROEIDValidator;

    // Error Code: 2033
    // Description: Invalid Event Date in the firmROEID
    // Explanation: The Event Date portion of the firmROEID must be in the correct format and must equal the date portion of eventTimestamp.
    @AssertTrue(message = "2033")
    private boolean isEventDateInFirmROEIDValid() {
        // Implement logic to check Event Date in firmROEID
        return true; // Replace with actual validation
    }

    // Error Code: 2034
    // Description: Missing or Invalid fulfillmentID
    // Explanation: fulfillmentID must be populated in the correct format.
    @NotNull(message = "2034")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2034")
    private String fulfillmentIDValidator;

    // Error Code: 2035
    // Description: Missing or Invalid fulfillmentLinkType
    // Explanation: fulfillmentLinkType must be populated with one of the allowable values.
    @NotNull(message = "2035")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2035")
    private String fulfillmentLinkTypeValidator;
}
public class CATEventValidator {

    // Error Code: 2036
    // Description: Invalid handlingInstructions
    // Explanation: handlingInstructions must be in the correct format and must include allowable values. Name and value must be provided when applicable.
    @AssertTrue(message = "2036")
    private boolean isHandlingInstructionsValid() {
        // Implement logic to check handlingInstructions format and values
        return true; // Replace with actual validation
    }

    // Error Code: 2037
    // Description: Invalid infoBarrierID
    // Explanation: infoBarrierID must be in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2037")
    private String infoBarrierIDValidator;

    // Error Code: 2038
    // Description: Missing or Invalid initiator
    // Explanation: initiator must be populated with one of the allowable values.
    @NotNull(message = "2038")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2038")
    private String initiatorValidator;

    // Error Code: 2039
    // Description: Missing or Invalid isolnd
    // Explanation: When required, isolnd value must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2039")
    private String isolndValidator;

    // Error Code: 2040
    // Description: Missing or Invalid leavesQty
    // Explanation: When required, leavesQty must be in the correct format, and must be less than or equal to quantity.
    @AssertTrue(message = "2040")
    private boolean isLeavesQtyValid() {
        // Implement logic to check leavesQty format and value
        return true; // Replace with actual validation
    }

    // Error Code: 2041
    // Description: Missing or Invalid manualFlag
    // Explanation: manualFlag must be one of the allowable values.
    @NotNull(message = "2041")
    @Pattern(regexp = "^(TRUE|FALSE)$", message = "2041")
    private String manualFlagValidator;

    // Error Code: 2042
    // Description: Missing or Invalid manualOrderKeyDate
    // Explanation: manualOrderKeyDate must be in the correct format; required if manualOrderID is populated.
    @AssertTrue(message = "2042")
    private boolean isManualOrderKeyDateValid() {
        // Implement logic to check manualOrderKeyDate format and requirement
        return true; // Replace with actual validation
    }

    // Error Code: 2043
    // Description: Missing or Invalid manualOrderID
    // Explanation: manualOrderID must be in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2043")
    private String manualOrderIDValidator;

    // Error Code: 2044
    // Description: Missing or Invalid marketCenterID
    // Explanation: When required, marketCenterID must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2044")
    private String marketCenterIDValidator;

    // Error Code: 2045
    // Description: Invalid minQty
    // Explanation: minQty must be in the correct format, must be greater than zero, and must be less than or equal to quantity.
    @AssertTrue(message = "2045")
    private boolean isMinQtyValid() {
        // Implement logic to check minQty format and value
        return true; // Replace with actual validation
    }

    // Error Code: 2046
    // Description: Invalid mpStatusCode
    // Explanation: mpStatusCode must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2046")
    private String mpStatusCodeValidator;
}

public class CATEventValidator {

    // Error Code: 2047
    // Description: Missing or Invalid nbboSource
    // Explanation: When required, nbboSource must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2047")
    private String nbboSourceValidator;

    // Error Code: 2048
    // Description: Missing or Invalid nbboTimestamp
    // Explanation: When required, nbboTimestamp must be in the correct format.
    @AssertTrue(message = "2048")
    private boolean isNbboTimestampValid() {
        // Implement logic to check nbboTimestamp format
        return true; // Replace with actual validation
    }

    // Error Code: 2049
    // Description: Missing or Invalid nbbPrice
    // Explanation: When required, nbbPrice must be in the correct format.
    @AssertTrue(message = "2049")
    private boolean isNbbPriceValid() {
        // Implement logic to check nbbPrice format
        return true; // Replace with actual validation
    }

    // Error Code: 2050
    // Description: Missing or Invalid nbbQty
    // Explanation: When required, nbbQty must be in the correct format.
    @AssertTrue(message = "2050")
    private boolean isNbbQtyValid() {
        // Implement logic to check nbbQty format
        return true; // Replace with actual validation
    }

    // Error Code: 2051
    // Description: Missing or Invalid nboPrice
    // Explanation: When required, nboPrice must be in the correct format.
    @AssertTrue(message = "2051")
    private boolean isNboPriceValid() {
        // Implement logic to check nboPrice format
        return true; // Replace with actual validation
    }

    // Error Code: 2052
    // Description: Missing or Invalid nboQty
    // Explanation: When required, nboQty must be in the correct format.
    @AssertTrue(message = "2052")
    private boolean isNboQtyValid() {
        // Implement logic to check nboQty format
        return true; // Replace with actual validation
    }

    // Error Code: 2053
    // Description: Missing or Invalid negotiatedTradeFlag
    // Explanation: negotiatedTradeFlag must be populated and one of the allowable values.
    @NotNull(message = "2053")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2053")
    private String negotiatedTradeFlagValidator;

    // Error Code: 2054
    // Description: Missing or Invalid sideDetailsInd
    // Explanation: sideDetailsInd must be populated with one of the allowable values.
    @NotNull(message = "2054")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2054")
    private String sideDetailsIndValidator;

    // Error Code: 2055
    // Description: Invalid nextUnlinked
    // Explanation: nextUnlinked must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2055")
    private String nextUnlinkedValidator;

    // Error Code: 2056
    // Description: Missing or Invalid onlyOneQuoteFlag
    // Explanation: onlyOneQuoteFlag must be populated with one of the allowable values if required to populate.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2056")
    private String onlyOneQuoteFlagValidator;

    // Error Code: 2057
    // Description: Missing or Invalid openCloseIndicator
    // Explanation: When required, openCloseIndicator must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2057")
    private String openCloseIndicatorValidator;

    // Error Code: 2058
    // Description: Missing or Invalid optionID
    // Explanation: optionID must be populated in the correct format.
    @NotNull(message = "2058")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2058")
    private String optionIDValidator;
}

public class CATEventValidator {

    // Error Code: 2059
    // Description: Missing or Invalid orderType
    // Explanation: orderType must be populated with one of the allowable values.
    @NotNull(message = "2059")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2059")
    private String orderTypeValidator;

    // Error Code: 2060
    // Description: optionID not effective on Event Date
    // Explanation: optionID is not effective on the event date.
    @AssertTrue(message = "2060")
    private boolean isOptionIDEffectiveValidator() {
        // Implement logic to check if optionID is effective on event date
        return true; // Replace with actual validation
    }

    // Error Code: 2061
    // Description: Missing or Invalid orderID
    // Explanation: orderID must be populated in the correct format.
    @NotNull(message = "2061")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2061")
    private String orderIDValidator;

    // Error Code: 2062
    // Description: Missing or Invalid orderType
    // Explanation: orderType must be populated with one of the allowable values.
    @NotNull(message = "2062")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2062")
    private String orderTypeValidator;

    // Error Code: 2063
    // Description: Missing or Invalid orderKeyDate
    // Explanation: orderKeyDate must be populated and in the correct format.
    @NotNull(message = "2063")
    @Pattern(regexp = "^\\d{8}$", message = "2063")
    private String orderKeyDateValidator;

    // Error Code: 2064
    // Description: Missing or Invalid originatingIMID
    // Explanation: If populated, originatingIMID must be in the correct format on all secondary events. Must be valid for the Event Date.
    @AssertTrue(message = "2064")
    private boolean isOriginatingIMIDValidator() {
        // Implement logic to check originatingIMID format and validity
        return true; // Replace with actual validation
    }

    // Error Code: 2065
    // Description: Missing or Invalid parentOrderID
    // Explanation: parentOrderID must be populated in the correct format.
    @NotNull(message = "2065")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2065")
    private String parentOrderIDValidator;

    // Error Code: 2066
    // Description: Missing or Invalid parentOrderKeyDate
    // Explanation: parentOrderKeyDate must be populated in the correct format.
    @NotNull(message = "2066")
    @Pattern(regexp = "^\\d{8}$", message = "2066")
    private String parentOrderKeyDateValidator;

    // Error Code: 2068
    // Description: Missing or Invalid price
    // Explanation: price must be in the correct format.
    @NotNull(message = "2068")
    @Digits(integer = 10, fraction = 8, message = "2068")
    private BigDecimal priceValidator;
}
public class CATEventValidator {

    // Error Code: 2069
    // Description: Missing or Invalid quantity
    // Explanation: quantity must be in the correct format.
    @NotNull(message = "2069")
    @Digits(integer = 10, fraction = 0, message = "2069")
    private Long quantityValidator;

    // Error Code: 2070
    // Description: Missing or Invalid quoteID
    // Explanation: When required, quoteID must be populated in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2070")
    private String quoteIDValidator;

    // Error Code: 2071
    // Description: Missing or Invalid quoteKeyDate
    // Explanation: When required, quoteKeyDate must be populated in the correct format.
    @Pattern(regexp = "^\\d{8}$", message = "2071")
    private String quoteKeyDateValidator;

    // Error Code: 2072
    // Description: Missing or Invalid priorOrderID
    // Explanation: When required, priorOrderID must be populated in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2072")
    private String priorOrderIDValidator;

    // Error Code: 2073
    // Description: Missing or Invalid priorOrderKeyDate
    // Explanation: When required, priorOrderKeyDate must be populated in the correct format.
    @Pattern(regexp = "^\\d{8}$", message = "2073")
    private String priorOrderKeyDateValidator;

    // Error Code: 2074
    // Description: Missing or Invalid priorQuoteID
    // Explanation: When required, priorQuoteID must be populated in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2074")
    private String priorQuoteIDValidator;

    // Error Code: 2075
    // Description: Missing or Invalid priorQuoteKeyDate
    // Explanation: When required, priorQuoteKeyDate must be populated in the correct format.
    @Pattern(regexp = "^\\d{8}$", message = "2075")
    private String priorQuoteKeyDateValidator;

    // Error Code: 2076
    // Description: Missing or Invalid receiverIMID
    // Explanation: receiverIMID must be populated in the correct format.
    @NotNull(message = "2076")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2076")
    private String receiverIMIDValidator;

    // Error Code: 2077
    // Description: Missing or Invalid receiverType
    // Explanation: receiverType must be populated in the correct format.
    @NotNull(message = "2077")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2077")
    private String receiverTypeValidator;
}
// Error Code: 2078 // Description: Missing or Invalid rejectionReason // Explanation: When required, rejectionReason must be populated in the correct format. @Pattern(regexp = “^a-zA-Z0-9+$”, message = “2078”) private String rejectionReasonValidator;
// Error Code: 2079 // Description: Missing or Invalid repairResponseTo // Explanation: repairResponseTo must be populated in the correct format. @NotNull(message = “2079”) @Pattern(regexp = “^a-zA-Z0-9+$”, message = “2079”) private String repairResponseToValidator;
// Error Code: 2080 // Description: Missing or Invalid reportingExceptionCode // Explanation: reportingExceptionCode must be populated in the correct format. @Pattern(regexp = “^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|…)$”, message = “2080”) private String reportingExceptionCodeValidator;
// Error Code: 2081 // Description: Missing or Invalid representativeInd // Explanation: representativeInd must be populated in the correct format. @NotNull(message = “2081”) @Pattern(regexp = “^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|…)$”, message = “2081”) private String representativeIndValidator;
// Error Code: 2082 // Description: Missing or Invalid RFQID // Explanation: RFQID must be populated in the correct format. @Pattern(regexp = “^a-zA-Z0-9+$”, message = “2082”) private String RFQIDValidator;
// Error Code: 2083 // Description: Missing or Invalid routedOrderID // Explanation: routedOrderID must be populated in the correct format. @NotNull(message = “2083”) @Pattern(regexp = “^a-zA-Z0-9+$”, message = “2083”) private String routedOrderIDValidator;
// Error Code: 2084 // Description: Invalid routedQuoteID // Explanation: When required, routedQuoteID must be populated in the correct format. @Pattern(regexp = “^a-zA-Z0-9+$”, message = “2084”) private String routedQuoteIDValidator;
// Error Code: 2085 // Description: Missing or Invalid routeRejectedFlag // Explanation: routeRejectedFlag must be one of the allowable values. @NotNull(message = “2085”) @Pattern(regexp = “^(TRUE|FALSE)$”, message = “2085”) private String routeRejectedFlagValidator;

// Error Code: 2086
// Description: Missing or Invalid routedOrderID
// Explanation: routedOrderID must be populated in the correct format.
@NotNull(message = "2086")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2086")
private String routedOrderIDValidator;

// Error Code: 2087
// Description: Invalid routedQuoteID
// Explanation: When required, routedQuoteID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2087")
private String routedQuoteIDValidator;

// Error Code: 2088
// Description: Invalid routeRejectedFlag
// Explanation: routeRejectedFlag must be one of the allowable values.
@NotNull(message = "2088")
@Pattern(regexp = "^(TRUE|FALSE)$", message = "2088")
private String routeRejectedFlagValidator;

// Error Code: 2089
// Description: Combination of senderType and senderIMID is invalid
// Explanation: If senderType = F, senderIMID is the IMID of an Industry Member. If senderType = E, senderIMID must be one of the allowable values.
@AssertTrue(message = "2089")
private boolean isSenderTypeAndSenderIMIDValid() {
    // Implement logic to check senderType and senderIMID combination
    return true; // Replace with actual validation
}

// Error Code: 2090
// Description: Missing or Invalid senderType
// Explanation: When required, senderType must be one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2090")
private String senderTypeValidator;

// Error Code: 2091
// Description: Missing or Invalid senderIMID
// Explanation: When required, senderIMID must be populated in the correct format. Must be valid for the Event Date.
@AssertTrue(message = "2091")
private boolean isSenderIMIDValid() {
    // Implement logic to check senderIMID format and validity
    return true; // Replace with actual validation
}

// Error Code: 2092
// Description: Missing or Invalid seqNum
// Explanation: When required, seqNum must be in the correct format.
@Pattern(regexp = "^[0-9]+$", message = "2092")
private String seqNumValidator;

// Error Code: 2093
// Description: Missing or Invalid session
// Explanation: When required, session must be populated. Required when destinationType is E.
@AssertTrue(message = "2093")
private boolean isSessionValid() {
    // Implement logic to check session requirement and format
    return true; // Replace with actual validation
}

// Error Code: 2095
// Description: Missing or Invalid side
// Explanation: side must be populated in one of the allowable values.
@NotNull(message = "2095")
@Pattern(regexp = "^(BUY|SELL|SHORT|EXEMPT)$", message = "2095")
private String sideValidator;

// Error Code: 2096
// Description: Missing or Invalid symbol
// Explanation: symbol must be populated in the correct format.
@NotNull(message = "2096")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2096")
private String symbolValidator;

// Continue with similar patterns for the remaining error codes...
// Error Code: 2098
// Description: symbol not effective on Event Date
// Explanation: symbol is not effective on the event date.
@AssertTrue(message = "2098")
private boolean isSymbolEffectiveValidator() {
    // Implement logic to check if symbol is effective on event date
    return true; // Replace with actual validation
}

// Error Code: 2099
// Description: symbol does not match listing market format
// Explanation: For exchange listed securities, the symbol format must match the format published by the primary listing market.
@AssertTrue(message = "2099")
private boolean isSymbolFormatValidator() {
    // Implement logic to check symbol format against listing market format
    return true; // Replace with actual validation
}

// Error Code: 2100
// Description: Invalid tapeTradeID
// Explanation: If populated, tapeTradeID must be in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2100")
private String tapeTradeIDValidator;

// Error Code: 2101
// Description: Missing or Invalid timeInForce
// Explanation: timeInForce value must be populated in the correct format. Name and value must be provided when applicable.
@NotNull(message = "2101")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2101")
private String timeInForceValidator;

// Error Code: 2102
// Description: Missing or Invalid tradeID
// Explanation: tradeID must be populated in the correct format.
@NotNull(message = "2102")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2102")
private String tradeIDValidator;

// Error Code: 2103
// Description: Missing or Invalid tradeKeyDate
// Explanation: tradeKeyDate must be populated in the correct format.
@NotNull(message = "2103")
@Pattern(regexp = "^\\d{8}$", message = "2103")
private String tradeKeyDateValidator;

// Error Code: 2104
// Description: Missing or Invalid tradingSession
// Explanation: tradingSession must be populated in one of the allowable values.
@NotNull(message = "2104")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2104")
private String tradingSessionValidator;

// Error Code: 2105
// Description: Missing or Invalid type
// Explanation: For each event type, type must be populated and one of the allowable values.
@NotNull(message = "2105")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2105")
private String typeValidator;

// Error Code: 2106
// Description: Missing or Invalid unsolicitedInd
// Explanation: unsolicitedInd must be populated in one of the allowable values.
@NotNull(message = "2106")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2106")
private String unsolicitedIndValidator;

// Error Code: 2107
// Description: Invalid workingPrice
// Explanation: workingPrice must be blank if atsDisplayInd is blank. When required, workingPrice must be populated in the correct format if atsDisplayInd is populated. If no workingPrice is applicable, it must be 0.
@AssertTrue(message = "2107")
private boolean isWorkingPriceValidator() {
    // Implement logic to check workingPrice based on atsDisplayInd
    return true; // Replace with actual validation
}
// Error Code: 2108
// Description: Missing or Invalid buyDetails
// Explanation: If sideDetailsInd = BUY, buyDetails must be populated. If sideDetailsInd = SELL, buyDetails must not be populated.
@AssertTrue(message = "2108")
private boolean isBuyDetailsValid() {
    if ("BUY".equals(sideDetailsInd) && buyDetails == null) {
        return false;
    }
    if ("SELL".equals(sideDetailsInd) && buyDetails != null) {
        return false;
    }
    return true;
}

// Error Code: 2109
// Description: Missing or Invalid orderID in buyDetails
// Explanation: When required, orderID must be populated in the correct format.
@AssertTrue(message = "2109")
private boolean isOrderIDInBuyDetailsValid() {
    if (buyDetails != null && StringUtils.isEmpty(buyDetails.getOrderID())) {
        return false;
    }
    return true;
}

// Error Code: 2110
// Description: Missing or Invalid orderKeyDate in buyDetails
// Explanation: When required, orderKeyDate must be populated in the correct format.
@AssertTrue(message = "2110")
private boolean isOrderKeyDateInBuyDetailsValid() {
    if (buyDetails != null && StringUtils.isEmpty(buyDetails.getOrderKeyDate())) {
        return false;
    }
    return true;
}

// Error Code: 2111
// Description: Missing or Invalid side in buyDetails
// Explanation: side must be populated in the correct format.
@AssertTrue(message = "2111")
private boolean isSideInBuyDetailsValid() {
    if (buyDetails != null && StringUtils.isEmpty(buyDetails.getSide())) {
        return false;
    }
    return true;
}

// Error Code: 2112
// Description: Missing or Invalid firmDesignatedID in buyDetails
// Explanation: When required, firmDesignatedID must be populated in the correct format.
@AssertTrue(message = "2112")
private boolean isFirmDesignatedIDInBuyDetailsValid() {
    if (buyDetails != null && StringUtils.isEmpty(buyDetails.getFirmDesignatedID())) {
        return false;
    }
    return true;
}

// Error Code: 2113
// Description: Missing or Invalid accountHolderType in buyDetails
// Explanation: When required, accountHolderType must be one of the allowable values.
@AssertTrue(message = "2113")
private boolean isAccountHolderTypeInBuyDetailsValid() {
    if (buyDetails != null && !isValidAccountHolderType(buyDetails.getAccountHolderType())) {
        return false;
    }
    return true;
}

    // Error Code: 2114
    // Description: Invalid combination of firmDesignatedID and orderID in buyDetails
    // Explanation: When required, the combination of firmDesignatedID and orderID in buyDetails must be valid.
    @AssertTrue(message = "2114")
    private boolean isFirmDesignatedIDAndOrderIDCombinationInBuyDetailsValid() {
        // Implement logic to check the combination of firmDesignatedID and orderID in buyDetails
        return true; // Replace with actual validation
    }

    // Error Code: 2115
    // Description: Missing or Invalid sellDetails
    // Explanation: If sideDetailsInd = SELL, sellDetails must be populated. If sideDetailsInd = BUY, sellDetails must not be populated.
    @AssertTrue(message = "2115")
    private boolean isSellDetailsValid() {
        if ("SELL".equals(sideDetailsInd) && sellDetails == null) {
            return false;
        }
        if ("BUY".equals(sideDetailsInd) && sellDetails != null) {
            return false;
        }
        return true;
    }

    // Error Code: 2116
    // Description: Missing or Invalid orderID in sellDetails
    // Explanation: When required, orderID must be populated in the correct format.
    @AssertTrue(message = "2116")
    private boolean isOrderIDInSellDetailsValid() {
        if (sellDetails != null && StringUtils.isEmpty(sellDetails.getOrderID())) {
            return false;
        }
        return true;
    }

    // Error Code: 2117
    // Description: Missing or Invalid orderKeyDate in sellDetails
    // Explanation: When required, orderKeyDate must be populated in the correct format.
    @AssertTrue(message = "2117")
    private boolean isOrderKeyDateInSellDetailsValid() {
        if (sellDetails != null && StringUtils.isEmpty(sellDetails.getOrderKeyDate())) {
            return false;
        }
        return true;
    }

    // Error Code: 2118
    // Description: Missing or Invalid side in sellDetails
    // Explanation: side must be populated in the correct format.
    @AssertTrue(message = "2118")
    private boolean isSideInSellDetailsValid() {
        if (sellDetails != null && StringUtils.isEmpty(sellDetails.getSide())) {
            return false;
        }
        return true;
    }

    // Error Code: 2119
    // Description: Missing or Invalid firmDesignatedID in sellDetails
    // Explanation: When required, firmDesignatedID must be populated in the correct format.
    @AssertTrue(message = "2119")
    private boolean isFirmDesignatedIDInSellDetailsValid() {
        if (sellDetails != null && StringUtils.isEmpty(sellDetails.getFirmDesignatedID())) {
            return false;
        }
        return true;
    }

    // Error Code: 2120
    // Description: Missing or Invalid accountHolderType in sellDetails
    // Explanation: When required, accountHolderType must be populated in the correct format.
    @AssertTrue(message = "2120")
    private boolean isAccountHolderTypeInSellDetailsValid() {
        if (sellDetails != null && !isValidAccountHolderType(sellDetails.getAccountHolderType())) {
            return false;
        }
        return true;
    }

   // Error Code: 2121
// Description: Missing or Invalid orderID in clientDetails
// Explanation: orderID must be populated in the correct format.
@NotNull(message = "2121")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2121")
private String orderIDInClientDetailsValidator;

// Error Code: 2122
// Description: Missing or Invalid orderKeyDate in clientDetails
// Explanation: orderKeyDate must be populated in the correct format.
@NotNull(message = "2122")
@Pattern(regexp = "^\\d{8}$", message = "2122")
private String orderKeyDateInClientDetailsValidator;

// Error Code: 2123
// Description: Missing or Invalid side in clientDetails
// Explanation: side must be populated in the correct format.
@NotNull(message = "2123")
@Pattern(regexp = "^(BUY|SELL|SHORT|EXEMPT)$", message = "2123")
private String sideInClientDetailsValidator;

// Error Code: 2124
// Description: Invalid firmDesignatedID in clientDetails
// Explanation: firmDesignatedID must be blank.
@AssertTrue(message = "2124")
private boolean isFirmDesignatedIDInClientDetailsValid() {
    return StringUtils.isBlank(clientDetails.getFirmDesignatedID());
}

// Error Code: 2125
// Description: Invalid accountHolderType in clientDetails
// Explanation: accountHolderType must be blank.
@AssertTrue(message = "2125")
private boolean isAccountHolderTypeInClientDetailsValid() {
    return StringUtils.isBlank(clientDetails.getAccountHolderType());
}

// Error Code: 2126
// Description: Missing or Invalid orderID in firmDetails
// Explanation: When required, orderID must be populated and in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2126")
private String orderIDInFirmDetailsValidator;

// Error Code: 2127
// Description: Missing or Invalid orderKeyDate in firmDetails
// Explanation: When required, orderKeyDate must be populated in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2127")
private String orderKeyDateInFirmDetailsValidator;

// Error Code: 2128
// Description: Missing or Invalid side in firmDetails
// Explanation: side must be populated and in the correct format.
@NotNull(message = "2128")
@Pattern(regexp = "^(BUY|SELL|SHORT|EXEMPT)$", message = "2128")
private String sideInFirmDetailsValidator;

// Error Code: 2130
// Description: Missing or Invalid accountHolderType in firmDetails
// Explanation: When required, accountHolderType must be one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2130")
private String accountHolderTypeInFirmDetailsValidator;

// Error Code: 2132
// Description: Record exceeds maximum length
// Explanation: Record length must not exceed the maximum length for each record.
@AssertTrue(message = "2132")
private boolean isRecordLengthValid() {
    // Implement logic to check record length
    return true; // Replace with actual validation
}

// Error Code: 2133
// Description: Additional fields are specified in the record but are not defined for this CAT event type
// Explanation: Refer to Sections 3.4 & 5 for permitted fields for each CAT event type.
@AssertTrue(message = "2133")
private boolean areAdditionalFieldsValid() {
    // Implement logic to check for undefined fields
    return true; // Replace with actual validation
}

// Error Code: 2134
// Description: Invalid JSON or CSV format
// Explanation: The record is not represented in a valid format as specified in Section 2.5 Data Types.
@AssertTrue(message = "2134")
private boolean isFormatValid() {
    // Implement logic to check JSON or CSV format
    return true; // Replace with actual validation
}

// Error Code: 2136
// Description: Invalid Alphanumeric Character
// Explanation: A field value in the record contains a delimiter or a non-allowable ASCII character
@AssertTrue(message = "2136")
private boolean areAlphanumericCharactersValid() {
    // Implement logic to check for invalid characters
    return true; // Replace with actual validation
}
// Code d'erreur : 2137
// Description : Manquant ou invalide
// Explication : Doit être rempli avec l'une des valeurs autorisées.
@NotNull(message = "2137")
@Pattern(regexp = "^(VALEUR_AUTORISEE_1|VALEUR_AUTORISEE_2|...)$", message = "2137")
private String representativeIndValidator;

// Code d'erreur : 2138
// Description : Manquant ou invalide reportingExceptionCode
// Explication : Lorsque requis, reportingExceptionCode doit être rempli avec l'une des valeurs autorisées.
@Pattern(regexp = "^(VALEUR_AUTORISEE_1|VALEUR_AUTORISEE_2|...)$", message = "2138")
private String reportingExceptionCodeValidator;

// Code d'erreur : 2139
// Description : Manquant ou invalide RFQID
// Explication : RFQID doit être rempli au format correct.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2139")
private String RFQIDValidator;

// Code d'erreur : 2140
// Description : Manquant ou invalide routedOrderID
// Explication : routedOrderID doit être rempli au format correct.
@NotNull(message = "2140")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2140")
private String routedOrderIDValidator;

// Code d'erreur : 2141
// Description : Invalide routedQuoteID
// Explication : Lorsque requis, routedQuoteID doit être rempli au format correct.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2141")
private String routedQuoteIDValidator;

// Code d'erreur : 2142
// Description : Manquant ou invalide routeRejectedFlag
// Explication : routeRejectedFlag doit être l'une des valeurs autorisées.
@NotNull(message = "2142")
@Pattern(regexp = "^(TRUE|FALSE)$", message = "2142")
private String routeRejectedFlagValidator;

// Error Code: 2143
// Description: Combination of senderType and senderIMID is invalid
// Explanation: If senderType = F, senderIMID is the IMID of an Industry Member. If senderType = E, senderIMID must be one of the allowable values.
@AssertTrue(message = "2143")
private boolean isSenderTypeAndSenderIMIDValid() {
    // Implement logic to check senderType and senderIMID combination
    return true; // Replace with actual validation
}

// Error Code: 2144
// Description: Missing or Invalid senderType
// Explanation: When required, senderType must be one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2144")
private String senderTypeValidator;

// Error Code: 2145
// Description: Missing or Invalid senderIMID
// Explanation: When required, senderIMID must be populated in the correct format. Must be valid for the Event Date.
@AssertTrue(message = "2145")
private boolean isSenderIMIDValid() {
    // Implement logic to check senderIMID format and validity
    return true; // Replace with actual validation
}

// Error Code: 2146
// Description: Missing or Invalid seqNum
// Explanation: When required, seqNum must be in the correct format.
@Pattern(regexp = "^[0-9]+$", message = "2146")
private String seqNumValidator;

// Error Code: 2147
// Description: Missing or Invalid session
// Explanation: When required, session must be populated. Required when destinationType is E.
@AssertTrue(message = "2147")
private boolean isSessionValid() {
    // Implement logic to check session requirement and format
    return true; // Replace with actual validation
}

// Error Code: 2148
// Description: Missing or Invalid side
// Explanation: side must be populated in one of the allowable values.
@NotNull(message = "2148")
@Pattern(regexp = "^(BUY|SELL|SHORT|EXEMPT)$", message = "2148")
private String sideValidator;

// Error Code: 2149
// Description: CATReporterIMID and senderIMID must be assigned to the same firm
// Explanation: CATReporterIMID and senderIMID must be assigned to the same firm.
@AssertTrue(message = "2149")
private boolean isCATReporterIMIDAndSenderIMIDValid() {
    // Implement logic to check if CATReporterIMID and senderIMID are assigned to the same firm
    return true; // Replace with actual validation
}

// Error Code: 2150
// Description: CATReporterIMID and receiverIMID must be assigned to the same firm
// Explanation: CATReporterIMID and receiverIMID must be assigned to the same firm.
@AssertTrue(message = "2150")
private boolean isCATReporterIMIDAndReceiverIMIDValid() {
    // Implement logic to check if CATReporterIMID and receiverIMID are assigned to the same firm
    return true; // Replace with actual validation
}
// Error Code: 2150
// Description: CATReporterIMID and receiverIMID must be assigned to the same firm
// Explanation: CATReporterIMID and receiverIMID must be assigned to the same firm.
@AssertTrue(message = "2150")
private boolean isCATReporterIMIDAndReceiverIMIDValid() {
    // Implement logic to check if CATReporterIMID and receiverIMID are assigned to the same firm
    return true; // Replace with actual validation
}

// Error Code: 2151
// Description: Firm provided record count in meta file does not equal row count in the data file
// Explanation: The record count in the data file as calculated by CAT does not match the record count provided in the metadata file.
@AssertTrue(message = "2151")
private boolean isRecordCountValid() {
    // Implement logic to check if record count matches between meta file and data file
    return true; // Replace with actual validation
}

// Error Code: 2153
// Description: Data File is not Readable
// Explanation: Data file format is not readable as it contains an invalid compression format.
@AssertTrue(message = "2153")
private boolean isDataFileReadable() {
    // Implement logic to check if data file is readable
    return true; // Replace with actual validation
}

// Error Code: 2154
// Description: Invalid quoteWantedInd
// Explanation: When required, quoteWantedInd must be populated in one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2154")
private String quoteWantedIndValidator;

// Error Code: 2156
// Description: Invalid reservedForFutureUse
// Explanation: reservedForFutureUse must not be populated.
@AssertTrue(message = "2156")
private boolean isReservedForFutureUseValid() {
    return StringUtils.isEmpty(reservedForFutureUse);
}

// Error Code: 2157
// Description: Invalid quantity in buyDetails
// Explanation: If populated, quantity in buyDetails must be in the correct format.
@AssertTrue(message = "2157")
private boolean isQuantityInBuyDetailsValid() {
    // Implement logic to check quantity format in buyDetails
    return true; // Replace with actual validation
}

// Error Code: 2158
// Description: Invalid originatingIMID in buyDetails
// Explanation: If populated, originatingIMID in buyDetails must be in the correct format.
@AssertTrue(message = "2158")
private boolean isOriginatingIMIDInBuyDetailsValid() {
    // Implement logic to check originatingIMID format in buyDetails
    return true; // Replace with actual validation
}

// Error Code: 2159
// Description: Invalid quantity in sellDetails
// Explanation: If populated, quantity in sellDetails must be in the correct format.
@AssertTrue(message = "2159")
private boolean isQuantityInSellDetailsValid() {
    // Implement logic to check quantity format in sellDetails
    return true; // Replace with actual validation
}

// Error Code: 2160
// Description: Invalid originatingIMID in sellDetails
// Explanation: If populated, originatingIMID in sellDetails must be in the correct format.
@AssertTrue(message = "2160")
private boolean isOriginatingIMIDInSellDetailsValid() {
    // Implement logic to check originatingIMID format in sellDetails
    return true; // Replace with actual validation
}

// Error Code: 2161
// Description: Invalid quantity in clientDetails
// Explanation: If populated, quantity in clientDetails must be in the correct format.
@AssertTrue(message = "2161")
private boolean isQuantityInClientDetailsValid() {
    // Implement logic to check quantity format in clientDetails
    return true; // Replace with actual validation
}

// Error Code: 2162
// Description: Invalid originatingIMID in clientDetails
// Explanation: If populated, originatingIMID in clientDetails must be in the correct format.
@AssertTrue(message = "2162")
private boolean isOriginatingIMIDInClientDetailsValid() {
    // Implement logic to check originatingIMID format in clientDetails
    return true; // Replace with actual validation
}

// Error Code: 2163
// Description: Invalid quantity in firmDetails
// Explanation: If populated, quantity in firmDetails must be in the correct format.
@AssertTrue(message = "2163")
private boolean isQuantityInFirmDetailsValid() {
    // Implement logic to check quantity format in firmDetails
    return true; // Replace with actual validation
}

// Error Code: 2164
// Description: Invalid originatingIMID in firmDetails
// Explanation: If populated, originatingIMID in firmDetails must be in the correct format
@AssertTrue(message = "2164")
private boolean isOriginatingIMIDInFirmDetailsValid() {
    // Implement logic to check originatingIMID format in firmDetails
    return true; // Replace with actual validation
}

// Error Code: 2164
// Description: Invalid originatingIMID in firmDetails
// Explanation: If populated, originatingIMID in firmDetails must be in the correct format
@AssertTrue(message = "2164")
private boolean isOriginatingIMIDInFirmDetailsValid() {
    // Implement logic to check originatingIMID format in firmDetails
    return true; // Replace with actual validation
}

// Error Code: 2165
// Description: Missing or Invalid orderID in aggregatedOrders
// Explanation: When required, orderID in aggregatedOrders must be populated in the correct format.
@AssertTrue(message = "2165")
private boolean isOrderIDInAggregatedOrdersValid() {
    // Implement logic to check orderID format in aggregatedOrders
    return true; // Replace with actual validation
}

// Error Code: 2166
// Description: Missing or Invalid orderKeyDate in aggregatedOrders
// Explanation: When required, orderKeyDate in aggregated orders must be populated in the correct format.
@AssertTrue(message = "2166")
private boolean isOrderKeyDateInAggregatedOrdersValid() {
    // Implement logic to check orderKeyDate format in aggregatedOrders
    return true; // Replace with actual validation
}

// Error Code: 2167
// Description: Invalid quantity in aggregatedOrders
// Explanation: If populated, quantity in aggregatedOrders must be in the correct format.
@AssertTrue(message = "2167")
private boolean isQuantityInAggregatedOrdersValid() {
    // Implement logic to check quantity format in aggregatedOrders
    return true; // Replace with actual validation
}

// Error Code: 2168
// Description: Invalid originatingIMID in aggregatedOrders
// Explanation: If populated, originatingIMID in aggregatedOrders must be in correct format.
@AssertTrue(message = "2168")
private boolean isOriginatingIMIDInAggregatedOrdersValid() {
    // Implement logic to check originatingIMID format in aggregatedOrders
    return true; // Replace with actual validation
}

// Error Code: 2169
// Description: Invalid combination of reportingExceptionCode and tapeTradeID
// Explanation: The combination of reportingExceptionCode and tapeTradeID must be valid. Refer to Section 4.12. for more details.
@AssertTrue(message = "2169")
private boolean isReportingExceptionCodeAndTapeTradeIDCombinationValid() {
    // Implement logic to check combination of reportingExceptionCode and tapeTradeID
    return true; // Replace with actual validation
}
// Error Code: 2169
// Description: Invalid combination of reportingExceptionCode and tapeTradeID
// Explanation: The combination of reportingExceptionCode and tapeTradeID must be valid. Refer to Section 4.12. for more details.
@AssertTrue(message = "2169")
private boolean isReportingExceptionCodeAndTapeTradeIDCombinationValid() {
    // Implement logic to check combination of reportingExceptionCode and tapeTradeID
    return true; // Replace with actual validation
}

// Error Code: 2170
// Description: Missing or Invalid allocationKeyDate
// Explanation: allocationKeyDate must be populated in the correct format.
@NotNull(message = "2170")
@Pattern(regexp = "^\\d{8}$", message = "2170")
private String allocationKeyDateValidator;

// Error Code: 2171
// Description: Missing or Invalid allocationID
// Explanation: allocationID must be populated in the correct format.
@NotNull(message = "2171")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2171")
private String allocationIDValidator;

// Error Code: 2172
// Description: Missing or Invalid priorAllocationKeyDate
// Explanation: When required, priorAllocationKeyDate must be populated in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2172")
private String priorAllocationKeyDateValidator;

// Error Code: 2173
// Description: Missing or Invalid priorAllocationID
// Explanation: When required, priorAllocationID must be populated and must be in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2173")
private String priorAllocationIDValidator;

// Error Code: 2174
// Description: Missing or Invalid custType
// Explanation: When required, custType must be populated with an allowable value.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2174")
private String custTypeValidator;

// Error Code: 2175
// Description: Missing or Invalid institutionFlag
// Explanation: institutionFlag must be populated with one of the allowable values
@NotNull(message = "2175")
@Pattern(regexp = "^(TRUE|FALSE)$", message = "2175")
private String institutionFlagValidator;

// Error Code: 2176
// Description: Missing or Invalid tradeDate
// Explanation: tradeDate must be populated in the correct format.
@NotNull(message = "2176")
@Pattern(regexp = "^\\d{8}$", message = "2176")
private String tradeDateValidator;

// Error Code: 2177
// Description: Missing or Invalid settlementDate
// Explanation: settlementDate must be populated in the correct format.
@NotNull(message = "2177")
@Pattern(regexp = "^\\d{8}$", message = "2177")
private String settlementDateValidator;

// Error Code: 2178
// Description: Missing or Invalid allocationType
// Explanation: allocationType must be populated with one of the allowable values
@NotNull(message = "2178")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2178")
private String allocationTypeValidator;


// Error Code: 2178
// Description: Missing or Invalid allocationType
// Explanation: allocationType must be populated with one of the allowable values
@NotNull(message = "2178")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2178")
private String allocationTypeValidator;

// Error Code: 2179
// Description: Missing or Invalid DVPCustodianID
// Explanation: When required, DVPCustodianID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2179")
private String DVPCustodianIDValidator;

// Error Code: 2180
// Description: Invalid correspondentCRD
// Explanation: If populated, correspondentCRD must be populated in the correct format.
@Pattern(regexp = "^[0-9]+$", message = "2180")
private String correspondentCRDValidator;

// Error Code: 2181
// Description: Invalid newOrderFDID
// Explanation: If populated, newOrderFDID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2181")
private String newOrderFDIDValidator;

// Error Code: 2182
// Description: Invalid allocationInstructionTime
// Explanation: If populated, allocationInstructionTime must be in the correct format.
@Pattern(regexp = "^\\d{8}T\\d{6}(\\.\\d{3,6})?Z$", message = "2182")
private String allocationInstructionTimeValidator;

// Error Code: 2183
// Description: Missing or Invalid quotingIDQS
// Explanation: When required, quotingIDQS must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2183")
private String quotingIDQSValidator;

// Error Code: 2184
// Description: Invalid combination of clearingFirm and reportingExceptionCode
// Explanation: Combination of clearingFirm and reportingExceptionCode must be valid.
@AssertTrue(message = "2184")
private boolean isClearingFirmAndReportingExceptionCodeCombinationValid() {
    // Implement logic to check combination of clearingFirm and reportingExceptionCode
    return true; // Replace with actual validation
}

// Error Code: 2185
// Description: Invalid combination of counterparty and reportingExceptionCode
// Explanation: Combination of counterparty and reportingExceptionCode must be valid.
@AssertTrue(message = "2185")
private boolean isCounterpartyAndReportingExceptionCodeCombinationValid() {
    // Implement logic to check combination of counterparty and reportingExceptionCode
    return true; // Replace with actual validation
}

// Error Code: 2186
// Description: Missing or Invalid solicitationFlag
// Explanation: solicitationFlag must be populated with one of the allowable values
@NotNull(message = "2186")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2186")
private String solicitationFlagValidator;

// Error Code: 2187
// Description: Invalid combination of RFQID and solicitationFlag
// Explanation: Combination of RFQID and solicitationFlag must be valid.
@AssertTrue(message = "2187")
private boolean isRFQIDAndSolicitationFlagCombinationValid() {
    // Implement logic to check combination of RFQID and solicitationFlag
    return true; // Replace with actual validation
}


// Error Code: 2188
// Description: Missing or Invalid unpricedInd
// Explanation: unpricedInd must be populated with one of the allowable values
@NotNull(message = "2188")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2188")
private String unpricedIndValidator;

// Error Code: 2189
// Description: Invalid combination of senderIMID and destination or receiverIMID
// Explanation: On Order Route or New Quote events, senderIMID must not equal destination. On Order Accepted, Order Modified, and Quote Received events, senderIMID must not equal receiverIMID.
@AssertTrue(message = "2189")
private boolean isSenderIMIDCombinationValid() {
    // Implement logic to check senderIMID combination
    return true; // Replace with actual validation
}

// Error Code: 2190
// Description: Invalid combination of orderID and parentOrderID or priorOrderID
// Explanation: When populated, parentOrderID or priorOrderID must not equal orderID.
@AssertTrue(message = "2190")
private boolean isOrderIDCombinationValid() {
    if ((parentOrderID != null && parentOrderID.equals(orderID)) || 
        (priorOrderID != null && priorOrderID.equals(orderID))) {
        return false;
    }
    return true;
}


// Error Code: 2187
// Description: Invalid combination of RFQID and solicitationFlag
// Explanation: Combination of RFQID and solicitationFlag must be valid.
@AssertTrue(message = "2187")
private boolean isRFQIDAndSolicitationFlagCombinationValid() {
    // Implement logic to check combination of RFQID and solicitationFlag
    return true; // Replace with actual validation
}

// Error Code: 2188
// Description: Missing or Invalid unpricedInd
// Explanation: unpricedInd must be populated with one of the allowable values
@NotNull(message = "2188")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2188")
private String unpricedIndValidator;

// Error Code: 2189
// Description: Invalid combination of senderIMID and destination or receiverIMID
// Explanation: On Order Route or New Quote events, senderIMID must not equal destination. On Order Accepted, Order Modified, and Quote Received events, senderIMID must not equal receiverIMID.
@AssertTrue(message = "2189")
private boolean isSenderIMIDCombinationValid() {
    // Implement logic to check senderIMID combination
    return true; // Replace with actual validation
}

// Error Code: 2190
// Description: Invalid combination of orderID and parentOrderID or priorOrderID
// Explanation: When populated, parentOrderID or priorOrderID must not equal orderID.
@AssertTrue(message = "2190")
private boolean isOrderIDCombinationValid() {
    if ((parentOrderID != null && parentOrderID.equals(orderID)) || 
        (priorOrderID != null && priorOrderID.equals(orderID))) {
        return false;
    }
    return true;
}


}



