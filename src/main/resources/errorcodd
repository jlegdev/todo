public class CATEventValidator {

    // Error Code: 2001
    // Description: Missing or Invalid accountHolderType
    // Explanation: accountHolderType must be populated with one of the allowable values.
    @NotNull(message = "2001")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2001")
    private String accountHolderTypeValidator;

    // Error Code: 2002
    // Description: Missing or Invalid actionType
    // Explanation: actionType must be populated with one of the allowable values.
    @NotNull(message = "2002")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2002")
    private String actionTypeValidator;

    // Error Code: 2003
    // Description: Missing or Invalid affiliateFlag
    // Explanation: affiliateFlag must be populated with one of the allowable values.
    @NotNull(message = "2003")
    @Pattern(regexp = "^(TRUE|FALSE)$", message = "2003")
    private String affiliateFlagValidator;

    // Error Code: 2004
    // Description: Missing or Invalid aggregatedOrders
    // Explanation: If populated, aggregatedOrders must be in the correct format.
    private String aggregatedOrders;
    @AssertTrue(message = "2004")
    private boolean isAggregatedOrdersValid() {
        // Implement logic to check aggregatedOrders format
        return true; // Replace with actual validation
    }

    // Error Code: 2005
    // Description: Missing or Invalid askPrice
    // Explanation: When required, askPrice must be in the correct format. Required when askQty is populated.
    private BigDecimal askPrice;
    private Long askQty;
    @AssertTrue(message = "2005")
    private boolean isAskPriceValid() {
        // Implement logic to check askPrice format and requirement
        return true; // Replace with actual validation
    }

    // Error Code: 2007
    // Description: Missing or Invalid askQty
    // Explanation: When required, askQty must be in the correct format. Required askPrice is populated.
    @AssertTrue(message = "2007")
    private boolean isAskQtyValid() {
        // Implement logic to check askQty format and requirement
        return true; // Replace with actual validation
    }

    // Error Code: 2008
    // Description: Missing or Invalid atsDisplayInd
    // Explanation: When required, atsDisplayInd must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2008")
    private String atsDisplayIndValidator;

    // Error Code: 2019
    // Description: Combination of destination and destinationType is Invalid
    // Explanation: For Route Events, specific destinationType and destination combinations are required.
    private String destination;
    private String destinationType;
    @AssertTrue(message = "2019")
    private boolean isDestinationTypeAndDestinationValid() {
        // Implement logic to check destinationType and destination combination
        return true; // Replace with actual validation
    }

    // Error Code: 2020
    // Description: Missing or Invalid destinationType
    // Explanation: destinationType must be populated with one of the allowable values.
    @NotNull(message = "2020")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2020")
    private String destinationTypeValidator;

    // Error Code: 2021
    // Description: Missing or Invalid displayPrice
    // Explanation: When required, displayPrice must be in the correct format.
    @NotBlank(message = "2021")
    private String displayPriceValidator;

    // Error Code: 2022
    // Description: Missing or Invalid displayQty
    // Explanation: When required, displayQty must be in the correct format.
    @NotBlank(message = "2022")
    private String displayQtyValidator;

    // Error Code: 2023
    // Description: Missing or Invalid dupROIDCond
    // Explanation: dupROIDCond must be populated with one of the allowable values.
    @NotNull(message = "2023")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2023")
    private String dupROIDCondValidator;

    // Error Code: 2024
    // Description: Missing or Invalid electronicDupFlag
    // Explanation: electronicDupFlag must be populated and is one of the allowable values.
    @NotNull(message = "2024")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2024")
    private String electronicDupFlagValidator;

    // Error Code: 2025
    // Description: Invalid electronicTimestamp
    // Explanation: electronicTimestamp must be in the correct format.
    @Pattern(regexp = "^\\d{8}T\\d{6}(\\.\\d{3,6})?Z$", message = "2025")
    private String electronicTimestampValidator;

    // Error Code: 2026
    // Description: Missing or Invalid errorROEID
    // Explanation: errorROEID must be blank when the actionType is 'NEW'; must be populated when actionType is 'RPR'.
    private String errorROEID;
    private String actionType;
    @AssertTrue(message = "2026")
    private boolean isErrorROEIDValid() {
        if ("NEW".equals(actionType) && StringUtils.isNotEmpty(errorROEID)) {
            return false;
        }
        if ("RPR".equals(actionType) && StringUtils.isEmpty(errorROEID)) {
            return false;
        }
        return true;
    }

    // Error Code: 2027
    // Description: Missing or Invalid eventTimestamp
    // Explanation: eventTimestamp must be in the correct format. If manualFlag is true, eventTimestamp must be reported in increments of at least one second. If manualFlag is false, eventTimestamp must be reported in increments of at least milliseconds.
    private String eventTimestamp;
    private Boolean manualFlag;
    @AssertTrue(message = "2027")
    private boolean isEventTimestampValid() {
        // Implement logic to check eventTimestamp format based on manualFlag
        return true; // Replace with actual validation
    }

    // Error Code: 2028
    // Description: Combination of exchOriginCode and destinationType is invalid
    // Explanation: For Option Order Route events, if destinationType is not E, exchOriginCode must be blank. If destinationType is E, exchOriginCode must be populated.
    private String exchOriginCode;
    @AssertTrue(message = "2028")
    private boolean isExchOriginCodeAndDestinationTypeValid() {
        if (!"E".equals(destinationType) && StringUtils.isNotEmpty(exchOriginCode)) {
            return false;
        }
        if ("E".equals(destinationType) && StringUtils.isEmpty(exchOriginCode)) {
            return false;
        }
        return true;
    }

    // Error Code: 2030
    // Description: Missing or Invalid fillKeyDate
    // Explanation: fillKeyDate must be populated in the correct format.
    @NotNull(message = "2030")
    @Pattern(regexp = "^\\d{8}$", message = "2030")
    private String fillKeyDateValidator;

    // Error Code: 2031
    // Description: Missing or Invalid firmDesignatedID
    // Explanation: When required, firmDesignatedID must be in the correct format and unique among all identifiers from any given Industry Member for each business date.
    private String firmDesignatedID;
    @AssertTrue(message = "2031")
    private boolean isFirmDesignatedIDValid() {
        // Implement logic to check firmDesignatedID format and uniqueness
        return true; // Replace with actual validation
    }

    // Error Code: 2032
    // Description: Missing or Invalid firmROEID
    // Explanation: firmROEID must be populated and in the correct format.
    @NotNull(message = "2032")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2032")
    private String firmROEIDValidator;

    // Error Code: 2033
    // Description: Invalid Event Date in the firmROEID
    // Explanation: The Event Date portion of the firmROEID must be in the correct format and must equal the date portion of eventTimestamp.
    private String firmROEID;
    @AssertTrue(message = "2033")
    private boolean isEventDateInFirmROEIDValid() {
        // Implement logic to check Event Date in firmROEID
        return true; // Replace with actual validation
    }

    // Error Code: 2034
    // Description: Missing or Invalid fulfillmentID
    // Explanation: fulfillmentID must be populated in the correct format.
    @NotNull(message = "2034")
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2034")
    private String fulfillmentIDValidator;

    // Error Code: 2035
    // Description: Missing or Invalid fulfillmentLinkType
    // Explanation: fulfillmentLinkType must be populated with one of the allowable values.
    @NotNull(message = "2035")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2035")
    private String fulfillmentLinkTypeValidator;

    // Error Code: 2036
    // Description: Invalid handlingInstructions
    // Explanation: handlingInstructions must be in the correct format and must include allowable values. Name and value must be provided when applicable.
    private String handlingInstructions;
    @AssertTrue(message = "2036")
    private boolean isHandlingInstructionsValid() {
        // Implement logic to check handlingInstructions format and values
        return true; // Replace with actual validation
    }

    // Error Code: 2037
    // Description: Invalid infoBarrierID
    // Explanation: infoBarrierID must be in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2037")
    private String infoBarrierIDValidator;

    // Error Code: 2038
    // Description: Missing or Invalid initiator
    // Explanation: initiator must be populated with one of the allowable values.
    @NotNull(message = "2038")
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2038")
    private String initiatorValidator;

    // Error Code: 2039
    // Description: Missing or Invalid isoInd
    // Explanation: When required, isoInd value must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2039")
    private String isoIndValidator;

    // Error Code: 2040
    // Description: Missing or Invalid leavesQty
    // Explanation: When required, leavesQty must be in the correct format, and must be less than or equal to quantity.
    private Long leavesQty;
    private Long quantity;
    @AssertTrue(message = "2040")
    private boolean isLeavesQtyValid() {
        if (leavesQty != null && quantity != null) {
            return leavesQty <= quantity;
        }
        return true; // Replace with actual validation
    }

    // Error Code: 2041
    // Description: Missing or Invalid manualFlag
    // Explanation: manualFlag must be one of the allowable values.
    @NotNull(message = "2041")
    @Pattern(regexp = "^(TRUE|FALSE)$", message = "2041")
    private String manualFlagValidator;

    // Error Code: 2042
    // Description: Missing or Invalid manualOrderKeyDate
    // Explanation: manualOrderKeyDate must be in the correct format; required if manualOrderID is populated.
    private String manualOrderKeyDate;
    private String manualOrderID;
    @AssertTrue(message = "2042")
    private boolean isManualOrderKeyDateValid() {
        if (StringUtils.isNotEmpty(manualOrderID) && StringUtils.isEmpty(manualOrderKeyDate)) {
            return false;
        }
        // Implement additional logic to check manualOrderKeyDate format
        return true; // Replace with actual validation
    }

    // Error Code: 2043
    // Description: Missing or Invalid manualOrderID
    // Explanation: manualOrderID must be in the correct format.
    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2043")
    private String manualOrderIDValidator;

    // Error Code: 2044
    // Description: Missing or Invalid marketCenterID
    // Explanation: When required, marketCenterID must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2044")
    private String marketCenterIDValidator;

    // Error Code: 2045
    // Description: Invalid minQty
    // Explanation: minQty must be in the correct format, must be greater than zero, and must be less than or equal to quantity.
    private Long minQty;
    @AssertTrue(message = "2045")
    private boolean isMinQtyValid() {
        if (minQty != null && quantity != null) {
            return minQty > 0 && minQty <= quantity;
        }
        return true; // Replace with actual validation
    }

    // Error Code: 2046
    // Description: Invalid mpStatusCode
    // Explanation: mpStatusCode must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2046")
    private String mpStatusCodeValidator;

    // Error Code: 2047
    // Description: Missing or Invalid nbboSource
    // Explanation: When required, nbboSource must be one of the allowable values.
    @Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2047")
    private String nbboSourceValidator;

    // Error Code: 2048
    // Description: Missing or Invalid nbboTimestamp
    // Explanation: When required, nbboTimestamp must be in the correct format.
    @Pattern(regexp = "^\\d{8}T\\d{6}(\\.\\d{3,6})?Z$", message = "2048")
    private String nbboTimestampValidator;

    // Error Code: 2049
    // Description: Missing or Invalid nbbPrice
    // Explanation: When required, nbbPrice must be in the correct format.
    @NotBlank(message = "2049")
    private String nbbPriceValidator;

    // Error Code: 2050
    // Description: Missing or Invalid nbbQty
    // Explanation: When required, nbbQty must be in the correct format.
    @NotBlank(message = "2050")
    private String nbbQtyValidator;

    // Error Code: 2051
    // Description: Missing or Invalid nboPrice
    // Explanation: When required, nboPrice must be in the correct format.
    @NotBlank(message = "2051")
    private String nboPriceValidator;

    // Error Code: 2052
    // Description: Missing or Invalid nboQty
    // Explanation: When required, nboQty must be in the correct format.
    @NotBlank(message = "2052")
    private String nboQtyValidator;

    // Error Code: 2052
// Description: Missing or Invalid nboQty
// Explanation: When required, nboQty must be in the correct format.
@NotBlank(message = "2052")
private String nboQtyValidator;

// Error Code: 2052
// Description: Missing or Invalid nboQty
// Explanation: When required, nboQty must be in the correct format.
@NotBlank(message = "2052")
private String nboQtyValidator;

// Error Code: 2053
// Description: Missing or Invalid negotiatedTradeFlag
// Explanation: negotiatedTradeFlag must be populated and one of the allowable values.
@NotNull(message = "2053")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2053")
private String negotiatedTradeFlagValidator;

// Error Code: 2054
// Description: Missing or Invalid sideDetailsInd
// Explanation: sideDetailsInd must be populated with one of the allowable values.
@NotNull(message = "2054")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2054")
private String sideDetailsIndValidator;

// Error Code: 2055
// Description: Invalid nextUnlinked
// Explanation: nextUnlinked must be one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2055")
private String nextUnlinkedValidator;

// Error Code: 2056
// Description: Missing or Invalid onlyOneQuoteFlag
// Explanation: onlyOneQuoteFlag must be populated with one of the allowable values if required to populate.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2056")
private String onlyOneQuoteFlagValidator;

// Error Code: 2057
// Description: Missing or Invalid openCloseIndicator
// Explanation: When required, openCloseIndicator must be one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2057")
private String openCloseIndicatorValidator;

// Error Code: 2058
// Description: Missing or Invalid optionID
// Explanation: optionID must be populated in the correct format.
@NotNull(message = "2058")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2058")
private String optionIDValidator;

// Error Code: 2060
// Description: optionID not effective on Event Date
// Explanation: optionID is not effective on the event date.
private String optionID;
private LocalDate eventDate;
@AssertTrue(message = "2060")
private boolean isOptionIDEffectiveValidator() {
    // Implement logic to check if optionID is effective on event date
    return true; // Replace with actual validation
}

// Error Code: 2061
// Description: Missing or Invalid orderID
// Explanation: orderID must be populated in the correct format.
@NotNull(message = "2061")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2061")
private String orderIDValidator;

// Error Code: 2062
// Description: Missing or Invalid orderType
// Explanation: orderType must be populated with one of the allowable values.
@NotNull(message = "2062")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2062")
private String orderTypeValidator;

// Error Code: 2063
// Description: Missing or Invalid orderKeyDate
// Explanation: orderKeyDate must be populated and in the correct format.
@NotNull(message = "2063")
@Pattern(regexp = "^\\d{8}$", message = "2063")
private String orderKeyDateValidator;

// Error Code: 2064
// Description: Missing or Invalid originatingIMID
// Explanation: If populated, originatingIMID must be in the correct format on all secondary events. Must be valid for the Event Date.
private String originatingIMID;
@AssertTrue(message = "2064")
private boolean isOriginatingIMIDValid() {
    // Implement logic to check originatingIMID format and validity
    return true; // Replace with actual validation
}

// Error Code: 2065
// Description: Missing or Invalid parentOrderID
// Explanation: parentOrderID must be populated in the correct format.
@NotNull(message = "2065")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2065")
private String parentOrderIDValidator;

// Error Code: 2066
// Description: Missing or Invalid parentOrderKeyDate
// Explanation: parentOrderKeyDate must be populated in the correct format.
@NotNull(message = "2066")
@Pattern(regexp = "^\\d{8}$", message = "2066")
private String parentOrderKeyDateValidator;

// Error Code: 2068
// Description: Missing or Invalid price
// Explanation: price must be in the correct format.
@NotNull(message = "2068")
@Digits(integer = 10, fraction = 8, message = "2068")
private BigDecimal priceValidator;

// Error Code: 2072
// Description: Missing or Invalid priorOrderID
// Explanation: When required, priorOrderID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2072")
private String priorOrderIDValidator;

// Error Code: 2073
// Description: Missing or Invalid priorOrderKeyDate
// Explanation: When required, priorOrderKeyDate must be populated in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2073")
private String priorOrderKeyDateValidator;

// Error Code: 2076
// Description: Missing or Invalid priorQuoteKeyDate
// Explanation: When required, priorQuoteKeyDate must be populated in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2076")
private String priorQuoteKeyDateValidator;

// Error Code: 2078
// Description: Missing or Invalid quantity
// Explanation: quantity must be in the correct format.
@NotNull(message = "2078")
@Digits(integer = 10, fraction = 0, message = "2078")
private Long quantityValidator;

// Error Code: 2079
// Description: Missing or Invalid quoteID
// Explanation: When required, quoteID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2079")
private String quoteIDValidator;

// Error Code: 2080
// Description: Missing or Invalid quoteKeyDate
// Explanation: When required, quoteKeyDate must be populated in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2080")
private String quoteKeyDateValidator;

// Error Code: 2081
// Description: Missing or Invalid receiverIMID
// Explanation: receiverIMID must be populated in the correct format.
@NotNull(message = "2081")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2081")
private String receiverIMIDValidator;

// Error Code: 2082
// Description: Missing or Invalid receiverType
// Explanation: receiverType must be populated in the correct format.
@NotNull(message = "2082")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2082")
private String receiverTypeValidator;

// Error Code: 2083
// Description: Missing or Invalid reportingExceptionCode
// Explanation: reportingExceptionCode must be populated in the correct format.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2083")
private String reportingExceptionCodeValidator;

// Error Code: 2084
// Description: Missing or Invalid representativeInd
// Explanation: representativeInd must be populated in the correct format.
@NotNull(message = "2084")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2084")
private String representativeIndValidator;

// Error Code: 2085
// Description: Missing or Invalid priorFillKeyDate
// Explanation: When required, priorFillKeyDate must be populated and in the correct format.
@Pattern(regexp = "^\\d{8}$", message = "2085")
private String priorFillKeyDateValidator;

// Error Code: 2085
// Description: Missing or Invalid priorFulfillmentID
// Explanation: When required, priorFulfillmentID must be in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2085")
private String priorFulfillmentIDValidator;

// Error Code: 2086
// Description: Missing or Invalid routedOrderID
// Explanation: routedOrderID must be populated in the correct format.
@NotNull(message = "2086")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2086")
private String routedOrderIDValidator;

// Error Code: 2087
// Description: Invalid routedQuoteID
// Explanation: When required, routedQuoteID must be populated in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2087")
private String routedQuoteIDValidator;

// Error Code: 2088
// Description: Invalid routeRejectedFlag
// Explanation: routeRejectedFlag must be one of the allowable values.
@NotNull(message = "2088")
@Pattern(regexp = "^(TRUE|FALSE)$", message = "2088")
private String routeRejectedFlagValidator;

// Error Code: 2089
// Description: Combination of senderType and senderIMID is invalid
// Explanation: If senderType = F, senderIMID is the IMID of an Industry Member. If senderType = E, senderIMID must be one of the allowable values.
private String senderType;
private String senderIMID;
@AssertTrue(message = "2089")
private boolean isSenderTypeAndSenderIMIDValid() {
    // Implement logic to check senderType and senderIMID combination
    return true; // Replace with actual validation
}

// Error Code: 2090
// Description: Missing or Invalid senderType
// Explanation: When required, senderType must be one of the allowable values.
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2090")
private String senderTypeValidator;

// Error Code: 2091
// Description: Missing or Invalid senderIMID
// Explanation: When required, senderIMID must be populated in the correct format. Must be valid for the Event Date.
@AssertTrue(message = "2091")
private boolean isSenderIMIDValid() {
    // Implement logic to check senderIMID format and validity
    return true; // Replace with actual validation
}

// Error Code: 2092
// Description: Missing or Invalid seqNum
// Explanation: When required, seqNum must be in the correct format.
@Pattern(regexp = "^[0-9]+$", message = "2092")
private String seqNumValidator;

// Error Code: 2093
// Description: Missing or Invalid session
// Explanation: When required, session must be populated. Required when destinationType is E.
private String session;
private String destinationType;
@AssertTrue(message = "2093")
private boolean isSessionValid() {
    if ("E".equals(destinationType) && StringUtils.isEmpty(session)) {
        return false;
    }
    return true;
}

// Error Code: 2095
// Description: Missing or Invalid side
// Explanation: side must be populated in one of the allowable values.
@NotNull(message = "2095")
@Pattern(regexp = "^(BUY|SELL|SHORT|EXEMPT)$", message = "2095")
private String sideValidator;

// Error Code: 2096
// Description: Missing or Invalid symbol
// Explanation: symbol must be populated in the correct format.
@NotNull(message = "2096")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2096")
private String symbolValidator;

// Error Code: 2098
// Description: symbol not effective on Event Date
// Explanation: symbol is not effective on the event date.
private String symbol;
@AssertTrue(message = "2098")
private boolean isSymbolEffectiveValidator() {
    // Implement logic to check if symbol is effective on event date
    return true; // Replace with actual validation
}

// Error Code: 2099
// Description: symbol does not match listing market format
// Explanation: For exchange listed securities, the symbol format must match the format published by the primary listing market.
@AssertTrue(message = "2099")
private boolean isSymbolFormatValidator() {
    // Implement logic to check symbol format against listing market format
    return true; // Replace with actual validation
}

// Error Code: 2100
// Description: Invalid tapeTradeID
// Explanation: If populated, tapeTradeID must be in the correct format.
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2100")
private String tapeTradeIDValidator;

// Error Code: 2101
// Description: Missing or Invalid timeInForce
// Explanation: timeInForce value must be populated in the correct format. Name and value must be provided when applicable.
@NotNull(message = "2101")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2101")
private String timeInForceValidator;

// Error Code: 2102
// Description: Missing or Invalid tradeID
// Explanation: tradeID must be populated in the correct format.
@NotNull(message = "2102")
@Pattern(regexp = "^[a-zA-Z0-9]+$", message = "2102")
private String tradeIDValidator;

// Error Code: 2103
// Description: Missing or Invalid tradeKeyDate
// Explanation: tradeKeyDate must be populated in the correct format.
@NotNull(message = "2103")
@Pattern(regexp = "^\\d{8}$", message = "2103")
private String tradeKeyDateValidator;

// Error Code: 2104
// Description: Missing or Invalid tradingSession
// Explanation: tradingSession must be populated in one of the allowable values.
@NotNull(message = "2104")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2104")
private String tradingSessionValidator;

// Error Code: 2105
// Description: Missing or Invalid type
// Explanation: For each event type, type must be populated and one of the allowable values.
@NotNull(message = "2105")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2|...)$", message = "2105")
private String typeValidator;

// Error Code: 2106
// Description: Missing or Invalid unsolicitedInd
// Explanation: unsolicitedInd must be populated in one of the allowable values.
@NotNull(message = "2106")
@Pattern(regexp = "^(ALLOWED_VALUE_1|ALLOWED_VALUE_2)$", message = "2106")
private String unsolicitedIndValidator;

// Error Code: 2107
// Description: Invalid workingPrice
// Explanation: workingPrice must be blank if atsDisplayInd is blank. When required, workingPrice must be populated in the correct format if atsDisplayInd is populated. If no workingPrice is applicable, it must be 0.
private BigDecimal workingPrice;
private String atsDisplayInd;
@AssertTrue(message = "2107")
private boolean isWorkingPriceValidator() {
    if (StringUtils.isEmpty(atsDisplayInd) && workingPrice != null) {
        return false;
    }
    if (StringUtils.isNot



